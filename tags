!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
=number?	./1-2_3_2.scm	/^(define (=number? exp num) (and (number? exp) (= exp num)))$/;"	f
X	./1-2_3_2.scm	/^(define X exit)$/;"	f
acat	./2_3_3-2_5.scm	/^(define acat '(cat "a cat"))$/;"	f
accumulate	./1-2_3_2.scm	/^(define (accumulate combiner null-value term a next b)$/;"	f
accumulate	./1-2_3_2.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	./2_3_3-2_5.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate	./3.scm	/^(define (accumulate op initial sequence)$/;"	f
accumulate-n	./1-2_3_2.scm	/^(define (accumulate-n op init seqs)$/;"	f
accumulate2	./1-2_3_2.scm	/^(define (accumulate2 combiner null-value term a next b)$/;"	f
add-rat	./1-2_3_2.scm	/^(define (add-rat x y)$/;"	f
add-vect	./1-2_3_2.scm	/^(define (add-vect v1 v2)$/;"	f
addend	./1-2_3_2.scm	/^(define (addend s) (cadr s))$/;"	f
addend	./1-2_3_2.scm	/^(define (addend s) (car s))$/;"	f
addend	./1-2_3_2.scm	/^(define (addend s) (split-at-sym s 'left '+))$/;"	f
adjoin-position	./1-2_3_2.scm	/^(define (adjoin-position new-row k rest-of-queens)$/;"	f
adjoin-positions	./1-2_3_2.scm	/^(define (adjoin-positions new-row k rest-of-queens)$/;"	f
adjoin-set	./2_3_3-2_5.scm	/^(define (adjoin-set x set)$/;"	f
adjoin-set2	./2_3_3-2_5.scm	/^(define (adjoin-set2 x set)$/;"	f
adog	./2_3_3-2_5.scm	/^(define adog '(dog "a dog"))$/;"	f
afish	./2_3_3-2_5.scm	/^(define afish '(fish "a fish"))$/;"	f
ahorse	./2_3_3-2_5.scm	/^(define ahorse '(mammal "a horse"))$/;"	f
aimag	./2_3_3-2_5.scm	/^(define aimag '(imag 10 5))$/;"	f
aint	./2_3_3-2_5.scm	/^(define aint '(int 3))$/;"	f
all-true	./2_3_3-2_5.scm	/^(define (all-true args)$/;"	f
apply-generic	./2_3_3-2_5.scm	/^(define (apply-generic op . args)$/;"	f
arat	./2_3_3-2_5.scm	/^(define arat '(rat 5 8))$/;"	f
area-rect	./1-2_3_2.scm	/^(define (area-rect rect)$/;"	f
areal	./2_3_3-2_5.scm	/^(define areal '(real 3.5))$/;"	f
attach-tag	./2_3_3-2_5.scm	/^(define (attach-tag type-tag contents)$/;"	f
augend	./1-2_3_2.scm	/^(define (augend s) (accumulate make-sum 0 (cddr s))) $/;"	f
augend	./1-2_3_2.scm	/^(define (augend s) (accumulate make-sum 0 (cddr s)))$/;"	f
augend	./1-2_3_2.scm	/^(define (augend s) (if (null? (cdddr s)) (caddr s) (cddr s)))$/;"	f
augend	./1-2_3_2.scm	/^(define (augend s) (split-at-sym s 'right '+))$/;"	f
average	./1-2_3_2.scm	/^(define (average x y)$/;"	f
balanced?	./1-2_3_2.scm	/^(define (balanced? mobile)$/;"	f
base	./1-2_3_2.scm	/^(define (base x) (cadr x))$/;"	f
below	./1-2_3_2.scm	/^(define (below down up)$/;"	f
below	./1-2_3_2.scm	/^(define (below p1 p2)$/;"	f
below2	./1-2_3_2.scm	/^(define (below2 p1 p2)$/;"	f
beside	./1-2_3_2.scm	/^(define (beside left right)$/;"	f
branch-length	./1-2_3_2.scm	/^(define (branch-length branch)$/;"	f
branch-structure	./1-2_3_2.scm	/^(define (branch-structure branch)$/;"	f
build-painter	./1-2_3_2.scm	/^(define (build-painter symbols)$/;"	f
cc	./1-2_3_2.scm	/^(define (cc amount coin-values)$/;"	f
choose-branch	./2_3_3-2_5.scm	/^(define (choose-branch bit branch)$/;"	f
clean-double-list	./1-2_3_2.scm	/^(define (clean-double-list x)$/;"	f
complete-fermat-test	./1-2_3_2.scm	/^(define (complete-fermat-test n)$/;"	f
compose	./1-2_3_2.scm	/^(define (compose f g)$/;"	f
compose-painters	./1-2_3_2.scm	/^(define (compose-painters p1 p2)$/;"	f
cons-stream	./1-2_3_2.scm	/^(define-macro cons-stream$/;"	f
cons-stream	./2_3_3-2_5.scm	/^(define-macro cons-stream$/;"	f
cons-stream	./3.scm	/^(define-macro cons-stream$/;"	f
cont-frac	./1-2_3_2.scm	/^(define (cont-frac n d k)$/;"	f
cont-frac2	./1-2_3_2.scm	/^(define (cont-frac2 n d k)$/;"	f
contains-symbol?	./2_3_3-2_5.scm	/^(define (contains-symbol? sym sym-list)$/;"	f
contents	./2_3_3-2_5.scm	/^(define (contents datum)$/;"	f
contents	./2_3_3-2_5.scm	/^(define (contents x) (cdr x))$/;"	f
corner-split	./1-2_3_2.scm	/^(define (corner-split painter n)$/;"	f
count-leaves	./1-2_3_2.scm	/^(define (count-leaves t)$/;"	f
cube	./1-2_3_2.scm	/^(define (cube x) (* x x x))$/;"	f
cubic	./1-2_3_2.scm	/^(define (cubic a b c)$/;"	f
decode	./2_3_3-2_5.scm	/^(define (decode bits tree)$/;"	f
decode-2-67	./2_3_3-2_5.scm	/^(define (decode-2-67)$/;"	f
deep-reverse	./1-2_3_2.scm	/^(define (deep-reverse l)$/;"	f
denom	./1-2_3_2.scm	/^(define (denom x) (cdr x))$/;"	f
deriv	./1-2_3_2.scm	/^(define (deriv exp var)$/;"	f
deriv	./1-2_3_2.scm	/^(define (deriv g)$/;"	f
div-rat	./1-2_3_2.scm	/^(define (div-rat x y)$/;"	f
divides?	./1-2_3_2.scm	/^(define (divides? a b)$/;"	f
dot-product	./1-2_3_2.scm	/^(define (dot-product v w)$/;"	f
double	./1-2_3_2.scm	/^(define (double f)$/;"	f
dx	./1-2_3_2.scm	/^(define dx 0.00001)$/;"	f
edge1-frame	./1-2_3_2.scm	/^(define (edge1-frame frame)$/;"	f
edge1-frame-bis	./1-2_3_2.scm	/^(define (edge1-frame-bis frame)$/;"	f
edge2-frame	./1-2_3_2.scm	/^(define (edge2-frame frame)$/;"	f
edge2-frame-bis	./1-2_3_2.scm	/^(define (edge2-frame-bis frame)$/;"	f
element-of-set2?	./2_3_3-2_5.scm	/^(define (element-of-set2? x set)$/;"	f
element-of-set?	./2_3_3-2_5.scm	/^(define (element-of-set? x set)$/;"	f
empty-board	./1-2_3_2.scm	/^(define empty-board nil)$/;"	f
encode	./2_3_3-2_5.scm	/^(define (encode message tree)$/;"	f
encode-symbol	./2_3_3-2_5.scm	/^(define (encode-symbol sym tree)$/;"	f
end-segment	./1-2_3_2.scm	/^(define (end-segment segm)$/;"	f
end-segment	./1-2_3_2.scm	/^(define (end-segment segment)$/;"	f
entry	./2_3_3-2_5.scm	/^(define (entry tree) (car tree))$/;"	f
enumerate-interval	./1-2_3_2.scm	/^(define (enumerate-interval from to)$/;"	f
equ?	./2_3_3-2_5.scm	/^(define (equ? x y) (apply-generic 'equ? x y))$/;"	f
equ?	./2_3_3-2_5.scm	/^(define (equ? x y)$/;"	f
equal-rat?	./1-2_3_2.scm	/^(define (equal-rat? x y)$/;"	f
equal2?	./1-2_3_2.scm	/^(define (equal2? first second)$/;"	f
euler-e	./1-2_3_2.scm	/^(define (euler-e k)$/;"	f
except-first-denomination	./1-2_3_2.scm	/^(define (except-first-denomination coin-values)$/;"	f
expmod	./1-2_3_2.scm	/^(define (expmod base exp m)$/;"	f
exponent	./1-2_3_2.scm	/^(define (exponent x) (caddr x))$/;"	f
exponentiation?	./1-2_3_2.scm	/^(define (exponentiation? x)$/;"	f
failed-test-2.82	./2_3_3-2_5.scm	/^(define (failed-test-2.82)$/;"	f
false	./1-2_3_2.scm	/^(define false #f)$/;"	f
false	./2_3_3-2_5.scm	/^(define false #f)$/;"	f
false	./3.scm	/^(define false #f)$/;"	f
fast-prime?	./1-2_3_2.scm	/^(define (fast-prime? n times)$/;"	f
fermat-test	./1-2_3_2.scm	/^(define (fermat-test n)$/;"	f
filter	./1-2_3_2.scm	/^(define (filter predicate seq)$/;"	f
filtered-accumulate	./1-2_3_2.scm	/^(define (filtered-accumulate combiner null-value use? term a next b)$/;"	f
find-divisor	./1-2_3_2.scm	/^(define (find-divisor n test-divisor)$/;"	f
first-3-primes	./1-2_3_2.scm	/^(define (first-3-primes n)$/;"	f
first-denomination	./1-2_3_2.scm	/^(define (first-denomination coin-values)$/;"	f
fixed-point	./1-2_3_2.scm	/^(define (fixed-point f first-guess)$/;"	f
flatmap	./1-2_3_2.scm	/^(define (flatmap proc seq)$/;"	f
fold-left	./1-2_3_2.scm	/^(define (fold-left op initial sequence)$/;"	f
fold-right	./1-2_3_2.scm	/^(define fold-right accumulate)$/;"	f
fringe	./1-2_3_2.scm	/^(define (fringe l)$/;"	f
g-car	./1-2_3_2.scm	/^(define (g-car n)$/;"	f
g-cdr	./1-2_3_2.scm	/^(define (g-cdr n)$/;"	f
g-cons	./1-2_3_2.scm	/^(define (g-cons a b)$/;"	f
g-for-each	./1-2_3_2.scm	/^(define (g-for-each func alist)$/;"	f
g-list-iter	./1-2_3_2.scm	/^(define (g-list-iter num exp cont)$/;"	f
g-reverse	./1-2_3_2.scm	/^(define (g-reverse l)$/;"	f
generate-huffman-tree	./2_3_3-2_5.scm	/^(define (generate-huffman-tree pairs)$/;"	f
get	./2_3_3-2_5.scm	/^(define (get op types)$/;"	f
get-coercion	./2_3_3-2_5.scm	/^(define (get-coercion x y)$/;"	f
get-level	./2_3_3-2_5.scm	/^(define (get-level type)$/;"	f
get-project	./2_3_3-2_5.scm	/^(define (get-project type)$/;"	f
get-raise	./2_3_3-2_5.scm	/^(define (get-raise type)$/;"	f
horner-eval	./1-2_3_2.scm	/^(define (horner-eval x coefficient-sequence)$/;"	f
hq-find-employee-record	./2_3_3-2_5.scm	/^(define (hq-find-employee-record employee division-list)$/;"	f
hq-get-record	./2_3_3-2_5.scm	/^(define (hq-get-record employee division)$/;"	f
hq-get-salary	./2_3_3-2_5.scm	/^(define (hq-get-salary record division)$/;"	f
identity	./1-2_3_2.scm	/^(define (identity x) x)$/;"	f
inc	./1-2_3_2.scm	/^(define (inc x) (+ x 1))$/;"	f
install-complex-package	./2_3_3-2_5.scm	/^(define (install-complex-package)$/;"	f
install-deriv-package	./2_3_3-2_5.scm	/^(define (install-deriv-package)$/;"	f
install-int-package	./2_3_3-2_5.scm	/^(define (install-int-package)$/;"	f
install-rat-package	./2_3_3-2_5.scm	/^(define (install-rat-package)$/;"	f
install-rational-package	./2_3_3-2_5.scm	/^(define (install-rational-package)$/;"	f
install-real-package	./2_3_3-2_5.scm	/^(define (install-real-package)$/;"	f
install-scheme-number-package	./2_3_3-2_5.scm	/^(define (install-scheme-number-package)$/;"	f
intersect-ord-list	./2_3_3-2_5.scm	/^(define (intersect-ord-list l1 l2)$/;"	f
intersection-set	./2_3_3-2_5.scm	/^(define (intersection-set set1 set2)$/;"	f
intersection-set-tree	./2_3_3-2_5.scm	/^(define (intersection-set-tree t1 t2)$/;"	f
intersection-set2	./2_3_3-2_5.scm	/^(define (intersection-set2 s1 s2)$/;"	f
iterative-improve	./1-2_3_2.scm	/^(define (iterative-improve good? improve)$/;"	f
kill-parallel-executors	./1-2_3_2.scm	/^(define (kill-parallel-executors thread-list)$/;"	f
kill-parallel-executors	./2_3_3-2_5.scm	/^(define (kill-parallel-executors thread-list)$/;"	f
kill-parallel-executors	./3.scm	/^(define (kill-parallel-executors thread-list)$/;"	f
last-pair	./1-2_3_2.scm	/^(define (last-pair l)$/;"	f
last-pair2	./1-2_3_2.scm	/^(define (last-pair2 l)$/;"	f
leaf?	./2_3_3-2_5.scm	/^(define (leaf? object)$/;"	f
left-branch	./1-2_3_2.scm	/^(define (left-branch mobile)$/;"	f
left-branch	./2_3_3-2_5.scm	/^(define (left-branch tree) (cadr tree))$/;"	f
left-branch	./2_3_3-2_5.scm	/^(define (left-branch tree) (car tree))$/;"	f
lenght-rect	./1-2_3_2.scm	/^(define (lenght-rect rect)$/;"	f
lookup	./2_3_3-2_5.scm	/^(define (lookup the-key db-tree)$/;"	f
make-branch	./1-2_3_2.scm	/^(define (make-branch alength structure)$/;"	f
make-code-tree	./2_3_3-2_5.scm	/^(define (make-code-tree left right)$/;"	f
make-exponentiation	./1-2_3_2.scm	/^(define (make-exponentiation base exponent)$/;"	f
make-frame	./1-2_3_2.scm	/^(define (make-frame origin edge1 edge2)$/;"	f
make-frame-bis	./1-2_3_2.scm	/^(define (make-frame-bis origin edge1 edge2)$/;"	f
make-int	./2_3_3-2_5.scm	/^(define (make-int i)$/;"	f
make-leaf	./2_3_3-2_5.scm	/^(define (make-leaf symbol weight)$/;"	f
make-leaf-set	./2_3_3-2_5.scm	/^(define (make-leaf-set pairs)$/;"	f
make-mobile	./1-2_3_2.scm	/^(define (make-mobile left right)$/;"	f
make-point	./1-2_3_2.scm	/^(define (make-point x y)$/;"	f
make-product	./1-2_3_2.scm	/^(define (make-product m1 m2)$/;"	f
make-rat	./1-2_3_2.scm	/^(define (make-rat n d)$/;"	f
make-rational	./2_3_3-2_5.scm	/^(define (make-rational n d)$/;"	f
make-real	./2_3_3-2_5.scm	/^(define (make-real r)$/;"	f
make-rect	./1-2_3_2.scm	/^(define (make-rect p1 height width)$/;"	f
make-segment	./1-2_3_2.scm	/^(define (make-segment p1 p2)$/;"	f
make-segment	./1-2_3_2.scm	/^(define (make-segment start-vect end-vect)$/;"	f
make-serializer	./1-2_3_2.scm	/^(define (make-serializer)$/;"	f
make-serializer	./2_3_3-2_5.scm	/^(define (make-serializer)$/;"	f
make-serializer	./3.scm	/^(define (make-serializer)$/;"	f
make-sum	./1-2_3_2.scm	/^(define (make-sum a1 a2)$/;"	f
make-tree	./2_3_3-2_5.scm	/^(define (make-tree entry left right)$/;"	f
make-vect	./1-2_3_2.scm	/^(define (make-vect x y)$/;"	f
mammal-fish-love	./2_3_3-2_5.scm	/^(define mammal-fish-love mammal-love)$/;"	f
mammal-love	./2_3_3-2_5.scm	/^(define (mammal-love . mammals)$/;"	f
maplist	./2_3_3-2_5.scm	/^(define (maplist funcs args)$/;"	f
matrix-*-matrix	./1-2_3_2.scm	/^(define (matrix-*-matrix m n)$/;"	f
matrix-*-vector	./1-2_3_2.scm	/^(define (matrix-*-vector m v) (map (lambda (x) (dot-product x v)) m))$/;"	f
max-seq	./1-2_3_2.scm	/^(define (max-seq seq)$/;"	f
merge-ord-lists	./2_3_3-2_5.scm	/^(define (merge-ord-lists l1 l2)$/;"	f
midpoint-segment	./1-2_3_2.scm	/^(define (midpoint-segment segment)$/;"	f
mul-rat	./1-2_3_2.scm	/^(define (mul-rat x y)$/;"	f
multiplicand	./1-2_3_2.scm	/^(define (multiplicand p) (accumulate make-product 1 (cddr p)))$/;"	f
multiplicand	./1-2_3_2.scm	/^(define (multiplicand p) (accumulate make-sum 0 (cddr p))) $/;"	f
multiplicand	./1-2_3_2.scm	/^(define (multiplicand s) (if (null? (cdddr s)) (caddr s) (cddr s)))$/;"	f
multiplicand	./1-2_3_2.scm	/^(define (multiplicand s) (split-at-sym s 'right '*))$/;"	f
multiplier	./1-2_3_2.scm	/^(define (multiplier p) (cadr p))$/;"	f
multiplier	./1-2_3_2.scm	/^(define (multiplier p) (car p))$/;"	f
multiplier	./1-2_3_2.scm	/^(define (multiplier s) (split-at-sym s 'left '*))$/;"	f
nest-pair	./1-2_3_2.scm	/^(define (nest-pair n)$/;"	f
nest-triplet	./1-2_3_2.scm	/^(define (nest-triplet n)$/;"	f
newton-transform	./1-2_3_2.scm	/^(define (newton-transform g)$/;"	f
newtons-method	./1-2_3_2.scm	/^(define (newtons-method g guess)$/;"	f
next	./1-2_3_2.scm	/^(define (next n)$/;"	f
nil	./1-2_3_2.scm	/^(define nil '())$/;"	f
nil	./2_3_3-2_5.scm	/^(define nil '())$/;"	f
nil	./3.scm	/^(define nil '())$/;"	f
no-check?	./1-2_3_2.scm	/^(define (no-check? p1 p2)$/;"	f
no-more?	./1-2_3_2.scm	/^(define (no-more? coin-values)$/;"	f
nth	./1-2_3_2.scm	/^(define (nth n seq)$/;"	f
numer	./1-2_3_2.scm	/^(define (numer x) (car x))$/;"	f
op-in?	./1-2_3_2.scm	/^(define (op-in? x op)$/;"	f
origin-frame	./1-2_3_2.scm	/^(define (origin-frame frame)$/;"	f
origin-frame-bis	./1-2_3_2.scm	/^(define (origin-frame-bis frame)$/;"	f
outline-painter	./1-2_3_2.scm	/^(define (outline-painter frame)$/;"	f
parallel-execute	./1-2_3_2.scm	/^(define (parallel-execute . args)$/;"	f
parallel-execute	./2_3_3-2_5.scm	/^(define (parallel-execute . args)$/;"	f
parallel-execute	./3.scm	/^(define (parallel-execute . args)$/;"	f
perimeter-rect	./1-2_3_2.scm	/^(define (perimeter-rect rect)$/;"	f
prime-sum-pairs	./1-2_3_2.scm	/^(define (prime-sum-pairs n)$/;"	f
prime-sum?	./1-2_3_2.scm	/^(define (prime-sum? pair)$/;"	f
prime?	./1-2_3_2.scm	/^(define (prime? n)$/;"	f
print-point	./1-2_3_2.scm	/^(define (print-point p)$/;"	f
print-rat	./1-2_3_2.scm	/^(define (print-rat x)$/;"	f
product	./1-2_3_2.scm	/^(define (product term a next b)$/;"	f
product2	./1-2_3_2.scm	/^(define (product2 term a next b)$/;"	f
product?	./1-2_3_2.scm	/^(define (product? x) (and (not (sum? x)) (op-in? x '*)))$/;"	f
product?	./1-2_3_2.scm	/^(define (product? x) (and (pair? x) (eq? (cadr x) '*)))$/;"	f
product?	./1-2_3_2.scm	/^(define (product? x) (and (pair? x) (eq? (car x) '*)))$/;"	f
project	./2_3_3-2_5.scm	/^(define (project type)$/;"	f
project-complex	./2_3_3-2_5.scm	/^(define (project-complex imag)$/;"	f
project-rat	./2_3_3-2_5.scm	/^(define (project-rat rat)$/;"	f
project-real	./2_3_3-2_5.scm	/^(define (project-real real)$/;"	f
queens	./1-2_3_2.scm	/^(define (queens board-size)$/;"	f
raise-to-common	./2_3_3-2_5.scm	/^(define (raise-to-common args)$/;"	f
raise-to-type	./2_3_3-2_5.scm	/^(define (raise-to-type type item)$/;"	f
random	./1-2_3_2.scm	/^(define (random n)$/;"	f
random	./2_3_3-2_5.scm	/^(define (random n)$/;"	f
random	./3.scm	/^(define (random n)$/;"	f
rel-prime-prod	./1-2_3_2.scm	/^(define (rel-prime-prod n)$/;"	f
repeat	./1-2_3_2.scm	/^(define (repeat f n)$/;"	f
report-prime	./1-2_3_2.scm	/^(define (report-prime elapsed-time)$/;"	f
reverse1	./1-2_3_2.scm	/^(define (reverse1 sequence)$/;"	f
reverse2	./1-2_3_2.scm	/^(define (reverse2 sequence)$/;"	f
right-branch	./1-2_3_2.scm	/^(define (right-branch mobile)$/;"	f
right-branch	./2_3_3-2_5.scm	/^(define (right-branch tree) (caddr tree))$/;"	f
right-branch	./2_3_3-2_5.scm	/^(define (right-branch tree) (cadr tree))$/;"	f
rotate-180	./1-2_3_2.scm	/^(define (rotate-180 painter)$/;"	f
runtime	./1-2_3_2.scm	/^(define (runtime)$/;"	f
runtime	./2_3_3-2_5.scm	/^(define (runtime)$/;"	f
runtime	./3.scm	/^(define (runtime)$/;"	f
s-append	./1-2_3_2.scm	/^(define (s-append seq1 seq2)$/;"	f
s-length	./1-2_3_2.scm	/^(define (s-length sequence)$/;"	f
s-map	./1-2_3_2.scm	/^(define (s-map p sequence)$/;"	f
safe?	./1-2_3_2.scm	/^(define (safe? k positions)$/;"	f
same-parity	./1-2_3_2.scm	/^(define (same-parity a . b)$/;"	f
same-variable?	./1-2_3_2.scm	/^(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))$/;"	f
sample-message	./2_3_3-2_5.scm	/^(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))$/;"	f
sample-tree	./2_3_3-2_5.scm	/^(define sample-tree$/;"	f
scale-vect	./1-2_3_2.scm	/^(define (scale-vect s vect)$/;"	f
search-for-primes	./1-2_3_2.scm	/^(define (search-for-primes from to)$/;"	f
segments->painter	./1-2_3_2.scm	/^(define (segments->painter segment-list)$/;"	f
simpson-integral	./1-2_3_2.scm	/^(define (simpson-integral func a b n)$/;"	f
simpson-integral2	./1-2_3_2.scm	/^(define (simpson-integral2 func a b n)$/;"	f
smallest-divisor	./1-2_3_2.scm	/^(define (smallest-divisor n)$/;"	f
smooth	./1-2_3_2.scm	/^(define (smooth f)$/;"	f
smooth-n	./1-2_3_2.scm	/^(define (smooth-n f n)$/;"	f
split	./1-2_3_2.scm	/^(define (split first second)$/;"	f
split-at-sym	./1-2_3_2.scm	/^(define (split-at-sym x direction sym)$/;"	f
split-horiz	./1-2_3_2.scm	/^(define (split-horiz painter)$/;"	f
sqrt-iter	./1-2_3_2.scm	/^(define (sqrt-iter x)$/;"	f
square	./1-2_3_2.scm	/^(define (square n) (* n n))$/;"	f
square-tree	./1-2_3_2.scm	/^(define (square-tree tree)$/;"	f
square-tree2	./1-2_3_2.scm	/^(define (square-tree2 tree)$/;"	f
start-prime-test	./1-2_3_2.scm	/^(define (start-prime-test n start-time)$/;"	f
start-segment	./1-2_3_2.scm	/^(define (start-segment segm)$/;"	f
start-segment	./1-2_3_2.scm	/^(define (start-segment segment)$/;"	f
stream-car	./1-2_3_2.scm	/^(define (stream-car stream) (car stream))$/;"	f
stream-car	./2_3_3-2_5.scm	/^(define (stream-car stream) (car stream))$/;"	f
stream-car	./3.scm	/^(define (stream-car stream) (car stream))$/;"	f
stream-cdr	./1-2_3_2.scm	/^(define (stream-cdr stream) (force (cdr stream)))$/;"	f
stream-cdr	./2_3_3-2_5.scm	/^(define (stream-cdr stream) (force (cdr stream)))$/;"	f
stream-cdr	./3.scm	/^(define (stream-cdr stream) (force (cdr stream)))$/;"	f
stream-null?	./1-2_3_2.scm	/^(define (stream-null? stream) (null? stream))$/;"	f
stream-null?	./2_3_3-2_5.scm	/^(define (stream-null? stream) (null? stream))$/;"	f
stream-null?	./3.scm	/^(define (stream-null? stream) (null? stream))$/;"	f
sub-rat	./1-2_3_2.scm	/^(define (sub-rat x y)$/;"	f
sub-vect	./1-2_3_2.scm	/^(define (sub-vect v1 v2)$/;"	f
subsets	./1-2_3_2.scm	/^(define (subsets s)$/;"	f
successive-merge	./2_3_3-2_5.scm	/^(define (successive-merge nodes)$/;"	f
sum	./1-2_3_2.scm	/^(define (sum term a next b)$/;"	f
sum-imag	./2_3_3-2_5.scm	/^(define (sum-imag . nums)$/;"	f
sum-triplet	./1-2_3_2.scm	/^(define (sum-triplet sum n)$/;"	f
sum2	./1-2_3_2.scm	/^(define (sum2 term a next b)$/;"	f
sum?	./1-2_3_2.scm	/^(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))$/;"	f
sum?	./1-2_3_2.scm	/^(define (sum? x) (and (pair? x) (eq? (car x) '+)))$/;"	f
sum?	./1-2_3_2.scm	/^(define (sum? x) (op-in? x '+))$/;"	f
symbol-leaf	./2_3_3-2_5.scm	/^(define (symbol-leaf x) (cadr x))$/;"	f
symbols	./2_3_3-2_5.scm	/^(define (symbols tree)$/;"	f
tan-cf	./1-2_3_2.scm	/^(define (tan-cf x k)$/;"	f
test-2-59	./2_3_3-2_5.scm	/^(define (test-2-59) $/;"	f
test-2-61	./2_3_3-2_5.scm	/^(define (test-2-61)$/;"	f
test-2-62	./2_3_3-2_5.scm	/^(define (test-2-62)$/;"	f
test-2-63	./2_3_3-2_5.scm	/^(define (test-2-63)$/;"	f
test-2-68	./2_3_3-2_5.scm	/^(define (test-2-68)$/;"	f
test-2-69	./2_3_3-2_5.scm	/^(define (test-2-69)$/;"	f
test-2-70	./2_3_3-2_5.scm	/^(define (test-2-70)$/;"	f
test-2.82	./2_3_3-2_5.scm	/^(define (test-2.82)$/;"	f
test-2.84	./2_3_3-2_5.scm	/^(define (test-2.84)$/;"	f
test-runner	./1-2_3_2.scm	/^(define (test-runner name exp1 exp2)$/;"	f
test-runner	./2_3_3-2_5.scm	/^(define (test-runner name exps)$/;"	f
test-runner	./3.scm	/^(define (test-runner name exps)$/;"	f
the-empty-stream	./1-2_3_2.scm	/^(define the-empty-stream '())$/;"	f
the-empty-stream	./2_3_3-2_5.scm	/^(define the-empty-stream '())$/;"	f
the-empty-stream	./3.scm	/^(define the-empty-stream '())$/;"	f
timed-prime-test	./1-2_3_2.scm	/^(define (timed-prime-test n)$/;"	f
tolerance	./1-2_3_2.scm	/^(define tolerance 0.00001)$/;"	f
top-type-of	./2_3_3-2_5.scm	/^(define (top-type-of args)$/;"	f
total-weight	./1-2_3_2.scm	/^(define (total-weight mobile)$/;"	f
transpose	./1-2_3_2.scm	/^(define (transpose mat) (accumulate-n$/;"	f
tree->list-1	./2_3_3-2_5.scm	/^(define (tree->list-1 tree)$/;"	f
tree->list-2	./2_3_3-2_5.scm	/^(define (tree->list-2 tree)$/;"	f
tree-map	./1-2_3_2.scm	/^(define (tree-map func tree)$/;"	f
true	./1-2_3_2.scm	/^(define true #t)$/;"	f
true	./2_3_3-2_5.scm	/^(define true #t)$/;"	f
true	./3.scm	/^(define true #t)$/;"	f
type	./2_3_3-2_5.scm	/^(define (type datum)$/;"	f
type-tag	./2_3_3-2_5.scm	/^(define (type-tag x) (car x))$/;"	f
uk-coins	./1-2_3_2.scm	/^(define uk-coins (list 100 50 20 10 5 2 1 0.5))$/;"	f
union-set	./2_3_3-2_5.scm	/^(define (union-set set1 set2)$/;"	f
union-set-tree	./2_3_3-2_5.scm	/^(define (union-set-tree t1 t2)$/;"	f
union-set2	./2_3_3-2_5.scm	/^(define (union-set2 s1 s2)$/;"	f
up-split	./1-2_3_2.scm	/^(define (up-split painter n)$/;"	f
us-coins	./1-2_3_2.scm	/^(define us-coins (list 50 25 10 5 1))$/;"	f
variable?	./1-2_3_2.scm	/^(define (variable? x) (symbol? x))$/;"	f
wallis-pi	./1-2_3_2.scm	/^(define (wallis-pi n)$/;"	f
weight	./2_3_3-2_5.scm	/^(define (weight tree)$/;"	f
weight-branch	./1-2_3_2.scm	/^(define (weight-branch branch)$/;"	f
weight-leaf	./2_3_3-2_5.scm	/^(define (weight-leaf x) (caddr x))$/;"	f
width-rect	./1-2_3_2.scm	/^(define (width-rect rect)$/;"	f
x-point	./1-2_3_2.scm	/^(define (x-point point)$/;"	f
xcor-vect	./1-2_3_2.scm	/^(define (xcor-vect vect)$/;"	f
y-point	./1-2_3_2.scm	/^(define (y-point point)$/;"	f
ycor-vect	./1-2_3_2.scm	/^(define (ycor-vect vect)$/;"	f
